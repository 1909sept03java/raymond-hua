--RESET DB
ALTER TABLE REIMBURSEMENT
DROP COLUMN EMPLOYEE_ID;
DROP TABLE EMPLOYEE;
DROP TABLE REIMBURSEMENT;

--CREATE TABLES
CREATE TABLE EMPLOYEE(
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    USERNAME VARCHAR2(100), 
    PASSWORD VARCHAR2(100),
    MANAGER_ID INTEGER
);
/
CREATE TABLE REIMBURSEMENT(
    REIMBURSEMENT_ID INTEGER PRIMARY KEY,
    EMPLOYEE_ID INTEGER,
    AMOUNT NUMBER,
    PAD INTEGER --PENDING(0)/APPROVED(1)/DENIED(2)
);
/

--Use sequences to generate USER_ID and BANK_ACCOUNT_ID.
DROP SEQUENCE E_INC;
DROP SEQUENCE R_INC;

CREATE SEQUENCE E_INC
START WITH 1
INCREMENT BY 1;
/
CREATE SEQUENCE R_INC
START WITH 1
INCREMENT BY 1;
/

--Triggers
CREATE OR REPLACE TRIGGER E_TRIG
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
   SELECT E_INC.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER R_TRIG
BEFORE INSERT ON REIMBURSEMENT
FOR EACH ROW
BEGIN
   SELECT R_INC.NEXTVAL INTO :NEW.REIMBURSEMENT_ID FROM DUAL;
END;
/

--FK
ALTER TABLE REIMBURSEMENT
ADD CONSTRAINT FK_EMPLOYEE_REIMBURSEMENT
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID);
/

--ALTER
ALTER TABLE REIMBURSEMENT ADD CONSTRAINT NOT_NEG CHECK (AMOUNT > 0.00);
ALTER TABLE REIMBURSEMENT ADD CONSTRAINT PAD_CHECK CHECK (PAD >= 0);
ALTER TABLE REIMBURSEMENT ADD CONSTRAINT PAD_CHECK2 CHECK (PAD <= 2);

INSERT ALL
INTO EMPLOYEE(USERNAME, PASSWORD, MANAGER_ID)
VALUES ('HI', 'BYE', 0)
INTO EMPLOYEE(USERNAME, PASSWORD, MANAGER_ID)
VALUES ('AAllison', 'AAllisonP', 1)
INTO EMPLOYEE(USERNAME, PASSWORD, MANAGER_ID)
VALUES ('BBenson', 'BBensonP', 1)
INTO EMPLOYEE(USERNAME, PASSWORD, MANAGER_ID)
VALUES ('CCodor', 'CCodorP', 1)
INTO EMPLOYEE(USERNAME, PASSWORD, MANAGER_ID)
VALUES ('DDaniels', 'DDanielsP', 2)
INTO EMPLOYEE(USERNAME, PASSWORD, MANAGER_ID)
VALUES ('EEricson', 'EEricsonP', 2)
INTO EMPLOYEE(USERNAME, PASSWORD, MANAGER_ID)
VALUES ('FFrederick', 'FFrederickP', 2)
SELECT * FROM DUAL;
/

SELECT MANAGER_ID FROM EMPLOYEE WHERE EMPLOYEE_ID = 3;
SELECT MANAGER_ID FROM EMPLOYEE WHERE MANAGER_ID = 1;
COMMIT;

